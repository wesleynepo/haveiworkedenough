{"version":3,"sources":["components/MainScreen/styles.ts","components/Logo/styles.ts","components/Logo/index.tsx","components/Timespent/styles.ts","components/Timespent/index.tsx","components/ClockList/styles.ts","components/ClockList/index.tsx","components/Button/styles.ts","components/Button/index.tsx","utils/local-storage.ts","components/MainScreen/index.tsx","pages/Home.tsx","App.tsx","styles/global.ts","reportWebVitals.ts","index.tsx"],"names":["Wrapper","styled","main","p","Logo","Timespent","timestamp","div","ClockList","list","map","item","index","key","button","Button","onClick","APP_KEY","MainScreen","useState","workingHour","setWorkingHour","times","setTimes","useEffect","length","localTimes","data","window","localStorage","getItem","JSON","parse","getStorageItem","Date","Number","interval","setInterval","timesAdjusted","concat","durations","time","array","getTime","pretty","Math","abs","reduce","current","secondsDecimalDigits","calculateWorkedTime","clearInterval","toLocaleTimeString","newTimings","value","stringify","setItem","setStorageItem","toString","HomePage","App","exact","path","GlobalStyles","createGlobalStyle","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5cf89d8b.chunk.js","sourcesContent":["import styled from 'styled-components'  \n\nexport const Wrapper = styled.main``  \n","import styled from 'styled-components'  \n\nexport const Wrapper = styled.p`\n  font-size: 1.5rem  \n  font-weight: bold  \n  margin-bottom: 0.5rem  \n`  \n","import React from 'react'  \nimport * as S from './styles'  \n\nexport type TimespentProps = {\n  timestamp: string\n}\n\nexport const Logo = () => (\n  <S.Wrapper>\n    Have I worked enough?\n  </S.Wrapper>\n)  \n","import styled from 'styled-components'  \n\nexport const Wrapper = styled.p`\n  font-size: 1.5rem  \n  font-weight: bold  \n  margin-bottom: 0.5rem  \n`  \n","import React from 'react'  \nimport * as S from './styles'  \n\nexport type TimespentProps = {\n  timestamp: string\n}\n\nexport const Timespent = ({timestamp}: TimespentProps) => (\n  <S.Wrapper>\n    {timestamp}\n  </S.Wrapper>\n)  \n","import styled from 'styled-components'  \n\nexport const Wrapper = styled.div`\n  display: flex  \n  flex-direction: column  \n`  \n","import React from 'react'  \nimport {Timespent, TimespentProps} from '../Timespent'  \nimport * as S from './styles'  \n\nexport type ClockListProps = {\n  list: TimespentProps[]\n}\n\nexport const ClockList = ({list}: ClockListProps) => (\n  <S.Wrapper>\n    {list.map((item, index) => <Timespent {...item} key={index} />)}\n  </S.Wrapper>\n)  \n","import styled from 'styled-components'  \n\nexport const Wrapper = styled.button`\n  font-weight: bold  \n  border: 0rem  \n  width: 5rem  \n  height: 5rem  \n  cursor: pointer  \n`  \n","import * as S from './styles'\nimport React from 'react'\n\nexport type ButtonProps = {\n  onClick: () => void\n}\n\nconst Button = ({onClick}: ButtonProps) => (\n  <S.Wrapper onClick={onClick} >\n    Punch the card\n  </S.Wrapper>\n) \n\nexport default Button \n","const APP_KEY = 'HIWE'\n\nexport function getStorageItem(key: string) {\n  const data = window.localStorage.getItem(`${APP_KEY}_${key}`)\n  return JSON.parse(data!)\n}\n\nexport function setStorageItem(key: string, value: string[]) {\n  const data = JSON.stringify(value)\n  return window.localStorage.setItem(`${APP_KEY}_${key}`, data)\n}\n","import * as S from './styles'  \nimport React, { useEffect, useState } from 'react'  \nimport { Logo } from '../Logo'  \nimport { Timespent } from '../Timespent'  \nimport { ClockList } from '../ClockList'  \nimport Button from '../Button'  \nimport pretty from 'pretty-ms'\nimport { getStorageItem, setStorageItem } from 'utils/local-storage'\n\n\nconst calculateWorkedTime = (times: Date[]) => {\n  const timesAdjusted = times.length % 2 !== 0 ? times.concat(new Date()) : times\n\n  const durations = timesAdjusted.map((time, index, array) => {\n    if( index % 2 === 0 && index !== timesAdjusted.length -1) {\n      return time.getTime() - array[index+1].getTime()\n    }\n\n    return 0\n  })\n\n  return pretty(Math.abs(durations.reduce((total = 0, current) => total + (current ?? 0), 0) ?? 0), {\n    secondsDecimalDigits: 0\n  })\n}\n\n\n\nconst MainScreen = () => {\n  const [workingHour, setWorkingHour] = useState('0')\n  const [times, setTimes] = useState<Date[]>([])\n\n  useEffect(() => {\n    if(!times.length) {\n      const localTimes = getStorageItem('times') as string[]\n      if (localTimes) {\n        setTimes(localTimes.map(item => new Date(Number(item))))\n      }\n    }\n  }, [])\n\n\n\n  useEffect(() =>{\n    const interval = setInterval(() => {\n      setWorkingHour(calculateWorkedTime(times))\n    }, 1000)\n    return () => clearInterval(interval)\n  })\n\n  const onClick = () => {\n    const newTimings = times.concat(new Date())\n    setTimes(newTimings)\n    setStorageItem('times', newTimings.map(item => item.getTime().toString()))\n  }\n\n  return (\n    <S.Wrapper>\n      <Logo />\n      <Timespent timestamp={workingHour} />\n      <ClockList list={times.map(item => ({ timestamp: item.toLocaleTimeString()}))} />\n      <Button onClick={onClick}/>\n    </S.Wrapper>\n  )\n}  \n\nexport default MainScreen  \n","import MainScreen from \"components/MainScreen\"\n\nexport function HomePage() {\n  return <MainScreen />\n}\n","import { HomePage } from \"pages/Home\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nexport function App() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/haveiworkedenough\">\n          <HomePage />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n","import { createGlobalStyle } from \"styled-components\";\n\nconst GlobalStyles = createGlobalStyle`\n  * {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n  }\n  html {\n    font-size: 62.5%;\n  }\n  body {\n    font-size: 16px;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif\n  }\n`;\n\nexport default GlobalStyles;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { App } from \"App\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport GlobalStyles from \"styles/global\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalStyles />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}