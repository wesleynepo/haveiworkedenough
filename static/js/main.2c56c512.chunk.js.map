{"version":3,"sources":["components/MainScreen/styles.ts","components/Logo/styles.ts","components/Logo/index.tsx","components/Timespent/styles.ts","components/Timespent/index.tsx","components/ClockList/styles.ts","components/ClockList/index.tsx","components/Button/styles.ts","components/Button/index.tsx","utils/local-storage.ts","components/MainScreen/index.tsx","pages/Home.tsx","App.tsx","styles/global.ts","reportWebVitals.ts","index.tsx"],"names":["Wrapper","styled","div","ButtonsWrapper","h1","Logo","p","size","css","Timespent","timestamp","ClockList","list","map","item","index","key","button","Button","onClick","label","APP_KEY","setStorageItem","value","data","JSON","stringify","window","localStorage","setItem","MainScreen","useState","workingHour","setWorkingHour","times","setTimes","useEffect","length","localTimes","getItem","parse","getStorageItem","Date","Number","interval","setInterval","timesAdjusted","concat","durations","time","array","getTime","pretty","Math","abs","reduce","current","secondsDecimalDigits","calculateWorkedTime","clearInterval","toLocaleTimeString","newTimings","toString","HomePage","App","exact","path","GlobalStyles","createGlobalStyle","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2c56c512.chunk.js","sourcesContent":["import styled from 'styled-components'  \n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`  \n\nexport const ButtonsWrapper = styled.div`\n  margin-top: 2rem;\n  display: flex;\n  flex-direction: row;\n`","import styled from 'styled-components'  \n\nexport const Wrapper = styled.h1`\n  font-size: 3rem;  \n  font-weight: bold;  \n  margin: 4rem;  \n  color: #e2b714;\n`  \n","import React from 'react'  \nimport * as S from './styles'  \n\nexport type TimespentProps = {\n  timestamp: string\n}\n\nexport const Logo = () => (\n  <S.Wrapper>\n    Have I worked enough?\n  </S.Wrapper>\n)  \n","import styled, {css} from 'styled-components'  \nimport { TimespentProps } from '.'\n\nexport type WrapperProps = Omit<TimespentProps, \"timestamp\">\n\n\nexport const Wrapper = styled.p<WrapperProps>`\n  ${({size}) => css`\n    font-size: ${ size === 'large' ? '4rem' : '1.5rem'};\n  `} \n  margin-right: 1rem;\n  font-weight: bold; \n  margin-bottom: 0.5rem;\n`  \n","import React from 'react'  \nimport * as S from './styles'  \n\nexport type TimespentProps = {\n  timestamp: string,\n  size?: 'normal' | 'large'\n}\n\nexport const Timespent = ({timestamp, size}: TimespentProps) => (\n  <S.Wrapper size={size}>\n    {timestamp}\n  </S.Wrapper>\n)  \n","import styled from 'styled-components'  \n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  width: 70%;\n  justify-content: flex-start;\n  overflow-x: auto;\n`  \n","import React from 'react'  \nimport {Timespent, TimespentProps} from '../Timespent'  \nimport * as S from './styles'  \n\nexport type ClockListProps = {\n  list: Omit<TimespentProps, 'size'>[]\n}\n\nexport const ClockList = ({list}: ClockListProps) => (\n  <S.Wrapper>\n    {list.map((item, index) => <Timespent {...item} key={index} size='normal' />)}\n  </S.Wrapper>\n)  \n","import styled from 'styled-components'  \n\nexport const Wrapper = styled.button`\n  color: #646669;\n  font-weight: bold;  \n  border: 0rem;  \n  width: auto;  \n  height: 5rem;  \n  cursor: pointer;\n  margin: 1rem;\n  background-color: transparent;\n`  \n","import * as S from './styles'\nimport React from 'react'\n\nexport type ButtonProps = {\n  onClick: () => void\n  label: string\n}\n\nconst Button = ({onClick, label}: ButtonProps) => (\n  <S.Wrapper onClick={onClick} >\n    {label}\n  </S.Wrapper>\n) \n\nexport default Button \n","const APP_KEY = 'HIWE'\n\nexport function getStorageItem(key: string) {\n  const data = window.localStorage.getItem(`${APP_KEY}_${key}`)\n  return JSON.parse(data!)\n}\n\nexport function setStorageItem(key: string, value: string[]) {\n  const data = JSON.stringify(value)\n  return window.localStorage.setItem(`${APP_KEY}_${key}`, data)\n}\n","import * as S from './styles'  \nimport React, { useEffect, useState } from 'react'  \nimport { Logo } from '../Logo'  \nimport { Timespent } from '../Timespent'  \nimport { ClockList } from '../ClockList'  \nimport Button from '../Button'  \nimport pretty from 'pretty-ms'\nimport { getStorageItem, setStorageItem } from 'utils/local-storage'\n\n\nconst calculateWorkedTime = (times: Date[]) => {\n  const timesAdjusted = times.length % 2 !== 0 ? times.concat(new Date()) : times\n\n  const durations = timesAdjusted.map((time, index, array) => {\n    if( index % 2 === 0 && index !== timesAdjusted.length -1) {\n      return time.getTime() - array[index+1].getTime()\n    }\n\n    return 0\n  })\n\n  return pretty(Math.abs(durations.reduce((total = 0, current) => total + (current ?? 0), 0) ?? 0), {\n    secondsDecimalDigits: 0\n  })\n}\n\n\n\nconst MainScreen = () => {\n  const [workingHour, setWorkingHour] = useState('0')\n  const [times, setTimes] = useState<Date[]>([])\n\n  useEffect(() => {\n    if(!times.length) {\n      const localTimes = getStorageItem('times') as string[]\n      if (localTimes) {\n        setTimes(localTimes.map(item => new Date(Number(item))))\n      }\n    }\n  }, [])\n\n  const cleanUp = () => {\n    setStorageItem('times', [])\n    setTimes([])\n  }\n\n  useEffect(() =>{\n    const interval = setInterval(() => {\n      setWorkingHour(calculateWorkedTime(times))\n    }, 1000)\n    return () => clearInterval(interval)\n  })\n\n  const onClick = () => {\n    const newTimings = times.concat(new Date())\n    setTimes(newTimings)\n    setStorageItem('times', newTimings.map(item => item.getTime().toString()))\n  }\n\n  return (\n    <S.Wrapper>\n      <Logo />\n      <Timespent timestamp={workingHour} size=\"large\" />\n      <ClockList list={times.map(item => ({ timestamp: item.toLocaleTimeString()}))} />\n      <S.ButtonsWrapper>\n      <Button label=\"Punch the card\" onClick={onClick}/>\n      <Button label=\"Start a new day\" onClick={cleanUp}/>\n      </S.ButtonsWrapper>\n    </S.Wrapper>\n  )\n}  \n\nexport default MainScreen  \n","import MainScreen from \"components/MainScreen\"\n\nexport function HomePage() {\n  return <MainScreen />\n}\n","import { HomePage } from \"pages/Home\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nexport function App() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/haveiworkedenough\">\n          <HomePage />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n","import { createGlobalStyle } from \"styled-components\";\n\nconst GlobalStyles = createGlobalStyle`\n  * {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n  }\n  html {\n    font-size: 62.5%;\n  }\n  body {\n    font-size: 16px;\n    font-family: Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n    background-color: #323437;\n    color: #646669;\n  }\n`;\n\nexport default GlobalStyles;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { App } from \"App\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport GlobalStyles from \"styles/global\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalStyles />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}